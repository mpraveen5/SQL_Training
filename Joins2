JOINS â€“ PRODUCT AND SALES
âœ… 1. Create the Tables
CREATE TABLE Product (
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR(100),
    Price DECIMAL(10, 2)
);

CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,
    ProductID INT,
    Quantity INT,
    OrderDate DATE,
    FOREIGN KEY (ProductID) REFERENCES Product(ProductID)
);
________________________________________
âœ… 2. Insert Sample Data
-- Products
INSERT INTO Product (ProductID, ProductName, Price) VALUES
(1, 'Laptop', 1000.00),
(2, 'Mouse', 25.00),
(3, 'Keyboard', 45.00),
(4, 'Monitor', 150.00),
(5, 'Webcam', 75.00);

-- Orders
INSERT INTO Orders (OrderID, ProductID, Quantity, OrderDate) VALUES
(101, 1, 2, '2025-08-01'),
(102, 2, 5, '2025-08-02'),
(103, 3, 3, '2025-08-03'),
(104, 1, 1, '2025-08-04'),
(105, 4, 2, '2025-08-04'),
(106, 5, 4, '2025-08-05');
________________________________________
âœ… 3. JOIN-Based Hands-On Questions

ðŸ”¹ Q1. List all orders with product names and prices.
select o.*, p.productname, p.price from orders o left join product p on o.productid = p.productid;
+---------+-----------+----------+------------+-------------+---------+
| OrderID | ProductID | Quantity | OrderDate  | productname | price   |
+---------+-----------+----------+------------+-------------+---------+
|     101 |         1 |        2 | 2025-08-01 | Laptop      | 1000.00 |
|     102 |         2 |        5 | 2025-08-02 | Mouse       |   25.00 |
|     103 |         3 |        3 | 2025-08-03 | Keyboard    |   45.00 |
|     104 |         1 |        1 | 2025-08-04 | Laptop      | 1000.00 |
|     105 |         4 |        2 | 2025-08-04 | Monitor     |  150.00 |
|     106 |         5 |        4 | 2025-08-05 | Webcam      |   75.00 |
+---------+-----------+----------+------------+-------------+---------+

ðŸ”¹ Q2. Show total amount for each order (price Ã— quantity).
select o.orderId, sum(p.price * o.quantity) as Tot_amt from orders o left join product p on o.productid = p.productid group by orderid;
+---------+---------+
| orderId | Tot_amt |
+---------+---------+
|     101 | 2000.00 |
|     102 |  125.00 |
|     103 |  135.00 |
|     104 | 1000.00 |
|     105 |  300.00 |
|     106 |  300.00 |
+---------+---------+

ðŸ”¹ Q3. Find all products that were never ordered.
select p.*,o.orderid from orders o right join product p on o.productid = p.productid where orderid is null;
Empty set

ðŸ”¹ Q4. Get the total quantity sold per product.
select o.productid, p.productname, sum(o.quantity) from orders o inner join product p on p.productid = o.productid group by productid;
+-----------+-------------+-----------------+
| productid | productname | sum(o.quantity) |
+-----------+-------------+-----------------+
|         1 | Laptop      |               3 |
|         2 | Mouse       |               5 |
|         3 | Keyboard    |               3 |
|         4 | Monitor     |               2 |
|         5 | Webcam      |               4 |
+-----------+-------------+-----------------+

ðŸ”¹ Q5. Find the most recent order for each product.

20 SQL JOIN-Based Questions
ðŸ”¹ 1â€“5: Basic INNER JOIN Use

1.	List all orders with product names and prices.
select o.*, p.productname, p.price from orders o inner join product p on o.productid = p.productid;
+---------+-----------+----------+------------+-------------+---------+
| OrderID | ProductID | Quantity | OrderDate  | productname | price   |
+---------+-----------+----------+------------+-------------+---------+
|     101 |         1 |        2 | 2025-08-01 | Laptop      | 1000.00 |
|     104 |         1 |        1 | 2025-08-04 | Laptop      | 1000.00 |
|     102 |         2 |        5 | 2025-08-02 | Mouse       |   25.00 |
|     103 |         3 |        3 | 2025-08-03 | Keyboard    |   45.00 |
|     105 |         4 |        2 | 2025-08-04 | Monitor     |  150.00 |
|     106 |         5 |        4 | 2025-08-05 | Webcam      |   75.00 |
+---------+-----------+----------+------------+-------------+---------+

2.	Display OrderID, ProductName, Quantity, and total cost (Quantity Ã— Price).
select o.orderId, p.productname,quantity, sum(p.price * o.quantity) as Tot_Cost from orders o inner join product p on o.productid = p.productid group by orderid;
+---------+-------------+----------+----------+
| orderId | productname | quantity | Tot_Cost |
+---------+-------------+----------+----------+
|     101 | Laptop      |        2 |  2000.00 |
|     104 | Laptop      |        1 |  1000.00 |
|     102 | Mouse       |        5 |   125.00 |
|     103 | Keyboard    |        3 |   135.00 |
|     105 | Monitor     |        2 |   300.00 |
|     106 | Webcam      |        4 |   300.00 |
+---------+-------------+----------+----------+

3.	List all orders placed on or after '2025-08-03' with product details.
select p.*, o.orderdate from orders o inner join product p on p.productid = o.productid where orderdate >= '2025-08-03';
+-----------+-------------+---------+------------+
| ProductID | ProductName | Price   | orderdate  |
+-----------+-------------+---------+------------+
|         3 | Keyboard    |   45.00 | 2025-08-03 |
|         1 | Laptop      | 1000.00 | 2025-08-04 |
|         4 | Monitor     |  150.00 | 2025-08-04 |
|         5 | Webcam      |   75.00 | 2025-08-05 |
+-----------+-------------+---------+------------+

4.	Show only those orders where the quantity ordered is more than 3.
select p.productid,p.productname,o.quantity from orders o inner join product p on o.productid = p.productid where o.quantity > 3;
+-----------+-------------+----------+
| productid | productname | quantity |
+-----------+-------------+----------+
|         2 | Mouse       |        5 |
|         5 | Webcam      |        4 |
+-----------+-------------+----------+

5.	List the products ordered along with their order date and price.
select p.*,o.quantity,o.orderdate from orders o inner join product p on o.productid = p.productid;
+-----------+-------------+---------+----------+------------+
| ProductID | ProductName | Price   | quantity | orderdate  |
+-----------+-------------+---------+----------+------------+
|         1 | Laptop      | 1000.00 |        2 | 2025-08-01 |
|         1 | Laptop      | 1000.00 |        1 | 2025-08-04 |
|         2 | Mouse       |   25.00 |        5 | 2025-08-02 |
|         3 | Keyboard    |   45.00 |        3 | 2025-08-03 |
|         4 | Monitor     |  150.00 |        2 | 2025-08-04 |
|         5 | Webcam      |   75.00 |        4 | 2025-08-05 |
+-----------+-------------+---------+----------+------------+

ðŸ”¹ 6â€“10: Aggregations With JOINs

6.	Find total quantity sold for each product.
select o.productid, p.productname, sum(o.quantity) from orders o inner join product p on p.productid = o.productid group by productid;
+-----------+-------------+-----------------+
| productid | productname | sum(o.quantity) |
+-----------+-------------+-----------------+
|         1 | Laptop      |               3 |
|         2 | Mouse       |               5 |
|         3 | Keyboard    |               3 |
|         4 | Monitor     |               2 |
|         5 | Webcam      |               4 |
+-----------+-------------+-----------------+

7.	Get total revenue for each product (Price Ã— Quantity).
select p.productname, sum(p.price * o.quantity) as Tot_Cost from product p inner join orders o on o.productid = p.productid group by productname;
+-------------+----------+
| productname | Tot_Cost |
+-------------+----------+
| Laptop      |  3000.00 |
| Mouse       |   125.00 |
| Keyboard    |   135.00 |
| Monitor     |   300.00 |
| Webcam      |   300.00 |
+-------------+----------+

8.	List all products along with the number of times they were ordered.
select p.productid, p.productname, count(o.orderid) as No_of_Orders from product p join orders o on o.productid = p.productid group by productname, productid;
+-----------+-------------+--------------+
| productid | productname | No_of_Orders |
+-----------+-------------+--------------+
|         1 | Laptop      |            2 |
|         2 | Mouse       |            1 |
|         3 | Keyboard    |            1 |
|         4 | Monitor     |            1 |
|         5 | Webcam      |            1 |
+-----------+-------------+--------------+

9.	Show average quantity per order for each product.
select o.productid,p.productname,avg(o.quantity) from orders o join product p on o.productid = p.productid group by productid,productname;
+-----------+-------------+-----------------+
| productid | productname | avg(o.quantity) |
+-----------+-------------+-----------------+
|         1 | Laptop      |          1.5000 |
|         2 | Mouse       |          5.0000 |
|         3 | Keyboard    |          3.0000 |
|         4 | Monitor     |          2.0000 |
|         5 | Webcam      |          4.0000 |
+-----------+-------------+-----------------+

10.	Find the product with the highest revenue.
select p.productname, sum(p.price * o.quantity) as Tot_Cost from product p inner join orders o on o.productid = p.productid group by productname order by Tot_cost desc limit 1;
+-------------+----------+
| productname | Tot_Cost |
+-------------+----------+
| Laptop      |  3000.00 |
+-------------+----------+

ðŸ”¹ 11â€“15: LEFT JOIN (Handling Missing Orders)

11.	List all products even if they have never been ordered.
select p.*, o.orderid from product p left join orders o on o.productid = p.productid;
+-----------+-------------+---------+---------+
| ProductID | ProductName | Price   | orderid |
+-----------+-------------+---------+---------+
|         1 | Laptop      | 1000.00 |     101 |
|         1 | Laptop      | 1000.00 |     104 |
|         2 | Mouse       |   25.00 |     102 |
|         3 | Keyboard    |   45.00 |     103 |
|         4 | Monitor     |  150.00 |     105 |
|         5 | Webcam      |   75.00 |     106 |
+-----------+-------------+---------+---------+

12.	Show product names and total quantity sold (0 if never ordered).
select p.productname, sum(o.quantity) as Tot_quantity from product p left join orders o on o.productid = p.productid group by productname
    ->  having case when Tot_quantity is null then 0
    ->  when Tot_quantity is not null then Tot_quantity
    ->  end ;
+-------------+--------------+
| productname | Tot_quantity |
+-------------+--------------+
| Laptop      |            3 |
| Mouse       |            5 |
| Keyboard    |            3 |
| Monitor     |            2 |
| Webcam      |            4 |
+-------------+--------------+

13.	Find products that were never ordered.
select p.productname, sum(o.quantity) as Tot_quantity from product p left join orders o on o.productid = p.productid group by productname having Tot_quantity is null;
Empty set

14.	Display product names with number of orders and revenue (include 0s).
select p.productname, count(o.orderid) as No_of_Orders, sum(o.quantity * p.price) as revenue from product p left join orders o on o.productid = p.productid group by productname;
+-------------+--------------+---------+
| productname | No_of_Orders | revenue |
+-------------+--------------+---------+
| Laptop      |            2 | 3000.00 |
| Mouse       |            1 |  125.00 |
| Keyboard    |            1 |  135.00 |
| Monitor     |            1 |  300.00 |
| Webcam      |            1 |  300.00 |
+-------------+--------------+---------+

15.	List all products and their most recent order date (if any).
select p.productname, max(o.orderdate) from product p left join orders o on o.productid = p.productid group by productname;
+-------------+------------------+
| productname | max(o.orderdate) |
+-------------+------------------+
| Laptop      | 2025-08-04       |
| Mouse       | 2025-08-02       |
| Keyboard    | 2025-08-03       |
| Monitor     | 2025-08-04       |
| Webcam      | 2025-08-05       |
+-------------+------------------+

ðŸ”¹ 16â€“20: Conditions and Filters With JOINs

16.	List all orders for products costing more than $100.
select orderid,productname,price from orders o join product p on o.productid = p.productid group by orderid,productname having p.price>100;
+---------+-------------+---------+
| orderid | productname | price   |
+---------+-------------+---------+
|     101 | Laptop      | 1000.00 |
|     104 | Laptop      | 1000.00 |
|     105 | Monitor     |  150.00 |
+---------+-------------+---------+

17.	Find orders where total cost exceeds $300.
select orderid, (o.quantity * p.price) as total from orders o join product p on o.productid = p.productid group by orderid having total>300;
+---------+---------+
| orderid | total   |
+---------+---------+
|     101 | 2000.00 |
|     104 | 1000.00 |
+---------+---------+

18.	Show all products that were ordered on '2025-08-04'.
select orderid, o.productid, p.productname from orders o join product p on o.productid = p.productid where OrderDate = '2025-08-04';
+---------+-----------+-------------+
| orderid | productid | productname |
+---------+-----------+-------------+
|     104 |         1 | Laptop      |
|     105 |         4 | Monitor     |
+---------+-----------+-------------+

19.	List products that have been ordered more than once.
select o.productid, productname, count(*) as count from orders o join product p on o.productid = p.productid group by productid having count(*) > 1;
+-----------+-------------+-------+
| productid | productname | count |
+-----------+-------------+-------+
|         1 | Laptop      |     2 |
+-----------+-------------+-------+

20.	List all products that were ordered less than 2 times or never ordered.
select o.productid, productname, count(*) as count from orders o join product p on o.productid = p.productid group by productid having count(*) < 2 or count(*) is null;
+-----------+-------------+-------+
| productid | productname | count |
+-----------+-------------+-------+
|         2 | Mouse       |     1 |
|         3 | Keyboard    |     1 |
|         4 | Monitor     |     1 |
|         5 | Webcam      |     1 |
+-----------+-------------+-------+
