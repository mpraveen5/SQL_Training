Joins 
1. Employees Table
CREATE TABLE Employees (
    emp_id INT PRIMARY KEY,
    name VARCHAR(50),
    department_id INT,
    salary INT
);

INSERT INTO Employees (emp_id, name, department_id, salary) VALUES
(1, 'Alice', 101, 60000),
(2, 'Bob', 102, 55000),
(3, 'Charlie', 101, 70000),
(4, 'David', 103, 48000),
(5, 'Eve', NULL, 75000),
(6, 'Frank', 104, 52000),
(7, 'Grace', 102, 58000),
(8, 'Hannah', NULL, 62000);
select * from employees;
+--------+---------+---------------+--------+
| emp_id | name    | department_id | salary |
+--------+---------+---------------+--------+
|      1 | Alice   |           101 |  60000 |
|      2 | Bob     |           102 |  55000 |
|      3 | Charlie |           101 |  70000 |
|      4 | David   |           103 |  48000 |
|      5 | Eve     |          NULL |  75000 |
|      6 | Frank   |           104 |  52000 |
|      7 | Grace   |           102 |  58000 |
|      8 | Hannah  |          NULL |  62000 |
+--------+---------+---------------+--------+
________________________________________
üß± 2. Departments Table
CREATE TABLE Departments (
    department_id INT PRIMARY KEY,
    department_name VARCHAR(50),
    location VARCHAR(50)
);

INSERT INTO Departments (department_id, department_name, location) VALUES
(101, 'HR', 'New York'),
(102, 'IT', 'San Francisco'),
(103, 'Finance', 'Chicago'),
(104, 'Sales', 'Boston'),
(105, 'Marketing', 'Los Angeles');
select * from departments;
+---------------+-----------------+---------------+
| department_id | department_name | location      |
+---------------+-----------------+---------------+
|           101 | HR              | New York      |
|           102 | IT              | San Francisco |
|           103 | Finance         | Chicago       |
|           104 | Sales           | Boston        |
|           105 | Marketing       | Los Angeles   |
+---------------+-----------------+---------------+
________________________________________
üîç 20 Hands-on SQL JOIN Questions
________________________________________
üîπ INNER JOIN
1.	List all employees along with their department names.
select E.*, D.department_name from employees as E inner join departments as D on E.department_id = D.department_id;
+--------+---------+---------------+--------+-----------------+
| emp_id | name    | department_id | salary | department_name |
+--------+---------+---------------+--------+-----------------+
|      1 | Alice   |           101 |  60000 | HR              |
|      2 | Bob     |           102 |  55000 | IT              |
|      3 | Charlie |           101 |  70000 | HR              |
|      4 | David   |           103 |  48000 | Finance         |
|      6 | Frank   |           104 |  52000 | Sales           |
|      7 | Grace   |           102 |  58000 | IT              |
+--------+---------+---------------+--------+-----------------+
2.	Show the names of employees who work in the IT department.
select E.name, D.department_name from employees as E inner join departments as D on E.department_id = D.department_id where department_name = 'it';
+-------+-----------------+
| name  | department_name |
+-------+-----------------+
| Bob   | IT              |
| Grace | IT              |
+-------+-----------------+
3.	Get the names and locations of departments where at least one employee works.
select E.name,D.department_name, D.location from employees as E inner join departments as D on E.department_id = D.department_id;
+---------+-----------------+---------------+
| name    | department_name | location      |
+---------+-----------------+---------------+
| Alice   | HR              | New York      |
| Bob     | IT              | San Francisco |
| Charlie | HR              | New York      |
| David   | Finance         | Chicago       |
| Frank   | Sales           | Boston        |
| Grace   | IT              | San Francisco |
+---------+-----------------+---------------+
4.	Find employees who work in the same location as the 'HR' department.
select E.name,D.department_name, D.location from employees as E inner join departments as D on E.department_id = D.department_id where location = any (select location from departments where department_name = 'HR');
+---------+-----------------+----------+
| name    | department_name | location |
+---------+-----------------+----------+
| Alice   | HR              | New York |
| Charlie | HR              | New York |
+---------+-----------------+----------+
5.	List department names and employee count (only departments with employees).
select d.department_name, count(e.name) as Employee_Count from departments d inner join employees e on d.department_id = e.department_id group by department_name;
+-----------------+---------------+
| department_name | count(e.name) |
+-----------------+---------------+
| HR              |             2 |
| IT              |             2 |
| Finance         |             1 |
| Sales           |             1 |
+-----------------+---------------+

________________________________________
üîπ LEFT JOIN
6.	List all employees and their departments (even if they don‚Äôt belong to any department).
select e.*, d.department_name from employees e left join departments d on d.department_id = e.department_id;
+--------+---------+---------------+--------+-----------------+
| emp_id | name    | department_id | salary | department_name |
+--------+---------+---------------+--------+-----------------+
|      1 | Alice   |           101 |  60000 | HR              |
|      2 | Bob     |           102 |  55000 | IT              |
|      3 | Charlie |           101 |  70000 | HR              |
|      4 | David   |           103 |  48000 | Finance         |
|      5 | Eve     |          NULL |  75000 | NULL            |
|      6 | Frank   |           104 |  52000 | Sales           |
|      7 | Grace   |           102 |  58000 | IT              |
|      8 | Hannah  |          NULL |  62000 | NULL            |
+--------+---------+---------------+--------+-----------------+
7.	Find employees who are not assigned to any department.
select e.*, d.department_name from employees e left join departments d on d.department_id = e.department_id where department_name is null;
+--------+--------+---------------+--------+-----------------+
| emp_id | name   | department_id | salary | department_name |
+--------+--------+---------------+--------+-----------------+
|      5 | Eve    |          NULL |  75000 | NULL            |
|      8 | Hannah |          NULL |  62000 | NULL            |
+--------+--------+---------------+--------+-----------------+
8.	List all departments and the names of employees working in them (include departments without employees).
select d.*, e.name from departments d left join employees e on d.department_id = e.department_id;
+---------------+-----------------+---------------+---------+
| department_id | department_name | location      | name    |
+---------------+-----------------+---------------+---------+
|           101 | HR              | New York      | Charlie |
|           101 | HR              | New York      | Alice   |
|           102 | IT              | San Francisco | Grace   |
|           102 | IT              | San Francisco | Bob     |
|           103 | Finance         | Chicago       | David   |
|           104 | Sales           | Boston        | Frank   |
|           105 | Marketing       | Los Angeles   | NULL    |
+---------------+-----------------+---------------+---------+ 
9.	Show employee names and department names, replacing NULLs with 'Unassigned'.
select e.*, case when department_name is null then 'Unassigned' else department_name end as dept_name from employees e left join departments d on d.department_id = e.department_id;
+--------+---------+---------------+--------+------------+
| emp_id | name    | department_id | salary | dept_name  |
+--------+---------+---------------+--------+------------+
|      1 | Alice   |           101 |  60000 | HR         |
|      2 | Bob     |           102 |  55000 | IT         |
|      3 | Charlie |           101 |  70000 | HR         |
|      4 | David   |           103 |  48000 | Finance    |
|      5 | Eve     |          NULL |  75000 | Unassigned |
|      6 | Frank   |           104 |  52000 | Sales      |
|      7 | Grace   |           102 |  58000 | IT         |
|      8 | Hannah  |          NULL |  62000 | Unassigned |
+--------+---------+---------------+--------+------------+
10.	Find departments where no employees are assigned.
select e.*, d.department_name from departments d left join employees e on d.department_id = e.department_id where e.name is null;
+--------+------+---------------+--------+-----------------+
| emp_id | name | department_id | salary | department_name |
+--------+------+---------------+--------+-----------------+
|   NULL | NULL |          NULL |   NULL | Marketing       |
+--------+------+---------------+--------+-----------------+

________________________________________
üîπ RIGHT JOIN (use LEFT JOIN with reversed tables if using SQLite/MySQL)
11.	Show all departments and the employees working in them (even if no employees).
(Use RIGHT JOIN or flip the LEFT JOIN if not supported)
12.	List all employees and their department locations.
________________________________________
üîπ FULL OUTER JOIN (Emulated in MySQL using UNION of LEFT and RIGHT JOIN)
13.	List all employees and departments, even if they don't match.
(Helpful to find both unassigned employees and empty departments)
14.	Show which employees or departments are missing a match.
________________________________________
üîπ SELF JOIN
15.	Find all pairs of employees who work in the same department.
16.	List employees along with their colleagues in the same department (exclude self).
17.	Find all employee pairs where one earns more than the other.
18.	List each employee with the name of the highest-paid person in their department.
________________________________________
üîπ CROSS JOIN
19.	List all possible employee-department combinations.
20.	Count how many total combinations of employees and departments exist.

